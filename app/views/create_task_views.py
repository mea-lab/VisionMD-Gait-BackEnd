import os
import importlib
from rest_framework.decorators import api_view
from django.http import JsonResponse
from django.urls import path
from django.conf import settings

def _create_view_for_task(file_name: str):
    """
    Given a task file name (e.g., 'finger_tap'), return a Django
    view function that:
      1) Dynamically imports analysis.tasks.finger_tap
      2) Instantiates the class named FingerTapTask
      3) Calls its api_response(request) method
      4) Returns the result as JsonResponse
    """
    
    @api_view(['POST'])
    def task_view(request):
        module_name = f"app.analysis.tasks.{file_name}"
        task_module = importlib.import_module(module_name)

        parts = file_name.split('_')
        camel_cased = ''.join(word.capitalize() for word in parts)
        class_name = f"{camel_cased}Task"

        task_class = getattr(task_module, class_name)
        task_instance = task_class()

        # We assume each class has a method called api_response(request)
        response_data = task_instance.api_response(request)
        return JsonResponse(response_data)

    return task_view

def generate_task_urlpatterns():
    """
    Look inside the analysis/tasks folder for all .py files,
    excluding base_task.py and __init__.py, and create a URL
    path for each of them. The URL pattern is the same as the
    filename, and it calls the view generated by _create_view_for_task.
    """

    tasks_dir = os.path.join(os.path.dirname(__file__), "..", "analysis", "tasks")

    urlpatterns = []

    for file in os.listdir(tasks_dir):
        # Only consider .py files, ignore base_task.py and __init__.py
        if file.endswith(".py") and file not in ["base_task.py", "__init__.py"]:
            file_name = file[:-3]

            # Build a Django view function on the fly
            view_func = _create_view_for_task(file_name)

            # We'll use the file name as the path, e.g. "finger_tap/"
            urlpatterns.append(
                path(f"{file_name}/", view_func, name=file_name)
            )

    return urlpatterns
